version: "3.9"

services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: whey
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    restart: unless-stopped
    ports:
      - "6379:6379"

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    environment:
      API_DATABASE_URL: postgresql+psycopg://postgres:postgres@db:5432/whey
      API_CELERY_BROKER_URL: redis://redis:6379/0
      API_CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ./apps/api:/app
    ports:
      - "8000:8000"
    command: ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  worker:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    environment:
      API_DATABASE_URL: postgresql+psycopg://postgres:postgres@db:5432/whey
      API_CELERY_BROKER_URL: redis://redis:6379/0
      API_CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ./apps/api:/app
    command: ["poetry", "run", "celery", "-A", "app.tasks", "worker", "--loglevel=INFO"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      api:
        condition: service_started
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000
      API_BASE_URL: http://api:8000
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    command:
      - sh
      - -c
      - npm install && npm run dev -- --hostname 0.0.0.0 --port 3000

volumes:
  postgres_data:
  frontend_node_modules:
  frontend_next:
